<%
/*
 * Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var log = new Log();

/*
 var isLogin = session.get("Loged");

 if (isLogin) {
 response.sendRedirect('/greg-impact');
 }
 */

var configs = require('../config.json');

var samlResponse = request.getParameter("SAMLResponse");
var sessionId = session.getId();
var samlRequest = request.getParameter("SAMLRequest");
// create a sso relying party js object
var security = require("sso");
var ssoRelyingParty = new security.SSORelyingParty(configs.ssoConfiguration.issuer);
var isLogoutResponse = false;
var isLogoutRequest = false;



if (samlResponse != null) {
    isLogoutResponse = ssoRelyingParty.isLogoutResponse(samlResponse);
    if (!Boolean(isLogoutResponse)) {

// relay state value should be a valid value, this value is mapped with request uri.
        var relayState = request.getParameter("RelayState");
        var requestedURI = ssoRelyingParty.getRelayStateProperty(relayState);
        log.debug(requestedURI);
        if (requestedURI == null) {
            log.debug("Relaystate value is invalid.");

        }

// validating the signature
        if (configs.ssoConfiguration.responseSigningEnabled) {
            var isSignatureValid = ssoRelyingParty.validateSignature(samlResponse);
            if (!Boolean(isSignatureValid)) {
                log.debug("SAML response signature is verification failed.");
            }
        }

        ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse);
        session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));
        session.put("Loged", "true");
        var username = ssoRelyingParty.getLoggedInUser(sessionId);

        var user = require('store').user;

        if (user.loginWithSAML(username)) {
            response.sendRedirect('/login.jag');
        }

    } else {
        log.debug('logout from greg-impact');
// if the saml response is log out request from IDP, we log out from web app.
        ssoRelyingParty.invalidateSessionBySessionId(sessionId);
        session.invalidate();
        response.sendRedirect('/login.jag');

    }

}
// if saml request is a log out request, then invalidate session.
if (samlRequest != null) {
    log.debug('logout request recived from store');
    isLogoutRequest = ssoRelyingParty.isLogoutRequest(samlRequest);
    if (Boolean(isLogoutRequest)) {
        ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
        session.invalidate();
    }
}

%>
